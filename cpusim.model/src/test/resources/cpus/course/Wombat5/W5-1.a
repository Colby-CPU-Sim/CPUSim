;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; This Wombat5 program computes fib(n) recursively.
; The definition if fib is:
;	fib(1) = fib(2) = 1
;	fib(n) = fib(n-1) + fib(n-2) for n < 2
; The fib subroutine takes two parameters:
;   n and the address where it is to put the result.
; It does not return a result like a function.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

n EQU 10
caddr EQU 8
RA EQU 6
laddr EQU 4
temp EQU 2

	push A0 	; *MAIN*: push space for the result
	read A0		; read n into A0
	push A0 	; push n onto the Stack (first param)
	load_c A1 0  	; load 0 into A1 (the address of the result)
	push A1		; push the address in A1 (second param)
	call fib 	; call the fib procedure
	load_s A2 2	; load result into A2
	write A2 	; output it
	stop 		; end of main program

;; subroutine fib
;; parameters:  a positive integer n, and an address
;; returns:  <none>
;; It computes fib(n) and stores it in the stack at the given address.
;; It crashes if n <= 0.
;; During execution, the registers will be used as follows:
;;	A[0] will contain n
;;	A[1] will be used for temporary values.
;;	A[3] will contain constants for incrementing
;; The stack frame has the following parts, starting at the bottom:
;;      n
;;	the address where the result is to be stored (caddr)
;;	the RA
;;	space for results from recursive calls (laddr)
;;      a local var (temp)

fib:	push A0		; *fib*: push space for laddr
	push A0		; push space for temp local var
	load_s A0 n	; load n into A[0]

	; handle the base case
	load_c A3 1	; put 1 in A[3]
	subtract A0 A3	; subtract 1 from n in A[0]
	jmpz A0 base 	; if n-1=0, jump to the end (base).
	subtract A0 A3	; subtract 1 from n-1 in A[0]
	jmpz A0 base	; if n-2=0, jump to the end (base).

	; prepare for the recursive call
	store_s A0 temp	; store n-2 in temp during the recursion
 	copytop A1	; copy top into A[1]
	load_c A3 laddr	; put offset of laddr into A[3]
	subtract A1 A3	; A[1] = address to put result
	push A0 	; push n-2 in A[0] (param 1)
	push A1		; push A[1] (param 2)
	call fib 	; call fib(n-2) recursively

	; save the value computed by the call to fib(n-2) in temp
	load_s A1 laddr ; load fib(n-2) into A[1] from laddr
	load_s A0 temp	; load the saved n-2 into A[0]
	store_s A1 temp	; store fib(n-2) into temp

	; prepare for the second recursive call
	load_c A3 1	; load constant 1 into A[3]
	add A0 A3 	; add 1 to n-2 in A[0]
	copytop A1	; copy top into A[1]
	load_c A3 laddr	; put offset of laddr into A[3]
	subtract A1 A3	; A[1] = address to put result
	push A0		; push n-1 from A[0] (param 1)
	push A1		; push A[1] (param 2)
	call fib 	; call fib(n-1) recursively

	; compute the result using the value returned by the call to fib(n-1)
	load_s A1 laddr	; load fib(n-1) into A[1] from laddr
	load_s A3 temp	; load fib(n-2) into A[3] from temp
	add A3 A1 	; add fib(n-1) and fib(n-2) in A[3]
	load_s A1 caddr	; copy the caddr into A1
	store_i A3 A1	; store result (in A[3]) to Stack[A[1]]
	jump done	; jump to done

base:	load_c A3 1	; base:  load 1 into A[3]
	load_s A1 caddr	; copy the caddr into A1
	store_i A3 A1	; store 1 to Stack[A[1]]
   
	; pop the frame and return
done:	pop A1		; done: pop & dispose of temp
	pop A1		; pop & dispose of laddr
	pop A2		; pop the RA into A[2]
	pop A1		; pop caddr into A[1]
	pop A1		; pop and dispose of n
	push A2		; done: push return address
	return 		; return to the caller
